/* The following code was generated by JFlex 1.4.2 on 5/23/21 1:55 PM */

package edu.utexas.cs.utopia.specLang.parse;

import com.github.jhoenicke.javacup.runtime.*;
import java.math.BigInteger;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 5/23/21 1:55 PM from the specification file
 * <tt>specLang.flex</tt>
 */
public class SpecLangLexer implements com.github.jhoenicke.javacup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FUNC = 8;
  public static final int ATOM = 6;
  public static final int ARGLIST = 10;
  public static final int CONSTRAINT = 2;
  public static final int YYINITIAL = 0;
  public static final int CONSTRAINT2 = 12;
  public static final int ARGS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\57\1\0"+
    "\1\5\2\0\1\53\1\0\1\13\1\14\1\6\1\63\1\61\1\64"+
    "\1\5\1\65\1\10\11\7\1\0\1\60\1\47\1\55\1\50\2\0"+
    "\6\12\1\37\1\4\1\41\4\4\1\42\1\36\2\4\1\52\1\26"+
    "\1\4\1\51\1\43\1\4\1\56\2\4\1\45\1\0\1\46\1\0"+
    "\1\4\1\0\1\17\1\12\1\30\1\22\1\21\1\31\1\4\1\33"+
    "\1\24\2\4\1\25\1\62\1\32\1\35\1\4\1\40\1\20\1\15"+
    "\1\16\1\27\1\34\1\23\1\11\2\4\1\44\1\54\1\66\1\4"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\2\1\1\2\1\3\1\4\10\2\1\5\2\0"+
    "\1\6\1\7\3\0\1\10\1\11\1\12\1\13\2\14"+
    "\5\2\1\15\1\16\1\17\1\20\1\0\1\11\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\13\2\1\35\1\36\1\37\1\40"+
    "\2\0\5\2\1\41\1\42\1\43\1\44\13\2\1\45"+
    "\1\46\1\47\1\50\3\2\1\51\1\2\1\52\5\2"+
    "\1\53\1\54\2\2\1\55\1\56\12\2\1\57\2\2"+
    "\1\60\1\61\5\2\1\62\1\63\1\2\1\64\4\2"+
    "\1\65\2\2\1\66\1\67\4\2\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u01b8\0\u01b8\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u01b8\0\u03de\0\u0415\0\u01ef"+
    "\0\u01ef\0\u044c\0\u0483\0\u04ba\0\u01ef\0\u01b8\0\u01b8\0\u01b8"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u01b8"+
    "\0\u01b8\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u01b8\0\u01b8\0\u01b8"+
    "\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8"+
    "\0\u01b8\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u01b8\0\u01b8\0\u01b8\0\u01b8"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u01b8"+
    "\0\u01b8\0\u09ab\0\u01b8\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u01ef\0\u01b8"+
    "\0\u09e2\0\u01ef\0\u0d89\0\u0dc0\0\u0df7\0\u01ef\0\u0e2e\0\u01ef"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u01ef\0\u0faf"+
    "\0\u0fe6\0\u01ef\0\u01ef\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u01ef\0\u1243\0\u127a"+
    "\0\u01ef\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u01ef"+
    "\0\u01ef\0\u13fb\0\u01ef\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u01ef"+
    "\0\u150e\0\u1545\0\u01ef\0\u01ef\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u01ef\0\u01ef";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\10\2\11\1\12\4\0\2\12\1\13\1\14"+
    "\1\15\1\12\1\16\1\17\2\12\1\20\4\12\1\21"+
    "\1\22\3\12\1\23\3\12\1\24\2\12\1\25\1\26"+
    "\1\0\1\27\1\0\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\0\1\12\5\0\1\10\2\11"+
    "\1\12\1\0\1\40\1\41\1\42\2\12\1\13\1\14"+
    "\1\43\1\44\11\12\1\45\1\46\3\12\1\47\6\12"+
    "\1\0\1\50\1\51\1\52\1\53\2\12\1\32\1\33"+
    "\1\54\1\12\1\55\1\0\1\56\1\12\1\57\1\60"+
    "\1\61\1\62\1\0\1\10\2\11\1\12\1\0\1\12"+
    "\2\0\2\12\1\13\1\14\27\12\1\25\4\0\2\12"+
    "\3\0\1\12\2\0\1\56\1\12\5\0\1\10\2\11"+
    "\7\0\1\63\54\0\1\10\2\11\1\12\1\0\1\12"+
    "\2\0\2\12\1\64\1\65\27\12\5\0\2\12\3\0"+
    "\1\12\2\0\1\66\1\12\5\0\1\10\2\11\1\12"+
    "\4\0\2\12\1\0\1\67\27\12\5\0\2\12\3\0"+
    "\1\12\2\0\1\56\1\12\5\0\1\10\2\11\1\12"+
    "\1\0\1\40\1\41\1\42\2\12\1\70\1\71\1\43"+
    "\1\44\11\12\1\45\1\46\3\12\1\47\6\12\1\0"+
    "\1\50\1\51\1\52\1\53\2\12\1\32\1\33\1\54"+
    "\1\12\1\55\1\0\1\56\1\12\1\57\1\60\1\61"+
    "\3\0\1\11\157\0\2\12\1\0\4\12\2\0\27\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\1\12\1\72\2\12\1\73\5\12"+
    "\1\74\14\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\1\75\26\12\5\0"+
    "\2\12\3\0\1\12\3\0\1\12\10\0\2\12\1\0"+
    "\4\12\2\0\4\12\1\76\22\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\10\0\2\12\1\0\4\12\2\0"+
    "\7\12\1\77\17\12\5\0\2\12\3\0\1\12\3\0"+
    "\1\12\10\0\2\12\1\0\4\12\2\0\2\12\1\100"+
    "\24\12\5\0\2\12\3\0\1\12\3\0\1\12\10\0"+
    "\2\12\1\0\4\12\2\0\2\12\1\101\4\12\1\102"+
    "\17\12\5\0\2\12\3\0\1\12\3\0\1\12\10\0"+
    "\2\12\1\0\4\12\2\0\12\12\1\103\14\12\5\0"+
    "\2\12\3\0\1\12\3\0\1\12\10\0\2\12\1\0"+
    "\4\12\2\0\25\12\1\104\1\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\52\0\1\105\70\0\1\106\71\0"+
    "\1\107\67\0\1\110\67\0\1\111\20\0\2\41\65\0"+
    "\2\41\1\112\44\0\1\112\14\0\2\12\1\0\4\12"+
    "\2\0\12\12\1\113\14\12\5\0\2\12\3\0\1\12"+
    "\3\0\1\12\10\0\2\12\1\0\4\12\2\0\3\12"+
    "\1\114\23\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\1\43\26\12\5\0"+
    "\2\12\3\0\1\12\3\0\1\12\10\0\2\12\1\0"+
    "\4\12\2\0\1\115\1\12\1\116\24\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\10\12\1\117\16\12\5\0\2\12\3\0\1\12"+
    "\3\0\1\12\61\0\1\120\66\0\1\121\66\0\1\122"+
    "\66\0\1\123\15\0\2\12\1\0\4\12\2\0\2\12"+
    "\1\124\24\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\15\12\1\125\11\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\13\12\1\126\13\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\1\127\26\12\5\0\2\12\3\0\1\12\3\0"+
    "\1\12\10\0\2\12\1\0\4\12\2\0\17\12\1\130"+
    "\3\12\1\131\3\12\5\0\2\12\3\0\1\12\3\0"+
    "\1\12\10\0\2\12\1\0\4\12\2\0\10\12\1\132"+
    "\16\12\5\0\2\12\3\0\1\12\3\0\1\12\10\0"+
    "\2\12\1\0\4\12\2\0\10\12\1\133\16\12\5\0"+
    "\2\12\3\0\1\12\3\0\1\12\10\0\2\12\1\0"+
    "\4\12\2\0\7\12\1\134\17\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\10\0\2\12\1\0\4\12\2\0"+
    "\15\12\1\135\11\12\5\0\2\12\3\0\1\12\3\0"+
    "\1\12\10\0\2\12\1\0\4\12\2\0\1\12\1\136"+
    "\25\12\5\0\2\12\3\0\1\12\3\0\1\12\10\0"+
    "\2\12\1\0\4\12\2\0\26\12\1\137\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\54\0\1\140\25\0\2\141"+
    "\1\0\1\141\4\0\1\141\1\0\2\141\5\0\2\141"+
    "\41\0\2\12\1\0\4\12\2\0\27\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\142\10\0\2\12\1\0\4\12"+
    "\2\0\12\12\1\143\14\12\5\0\2\12\3\0\1\12"+
    "\3\0\1\12\10\0\2\12\1\0\4\12\2\0\12\12"+
    "\1\144\14\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\10\12\1\145\16\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\5\12\1\146\21\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\3\12\1\147\23\12\5\0\2\12\3\0\1\12"+
    "\3\0\1\12\10\0\2\12\1\0\4\12\2\0\1\12"+
    "\1\150\25\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\13\12\1\151\13\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\4\12\1\152\22\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\4\12\1\153\22\12\5\0\2\12\3\0\1\12"+
    "\3\0\1\12\10\0\2\12\1\0\4\12\2\0\12\12"+
    "\1\154\14\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\10\12\1\155\16\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\10\12\1\156\16\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\10\12\1\157\16\12\5\0\2\12\3\0\1\12"+
    "\3\0\1\12\10\0\2\12\1\0\4\12\2\0\7\12"+
    "\1\160\17\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\21\12\1\161\5\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\4\12\1\162\22\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\27\12\5\0\2\12\3\0\1\12\3\0\1\163"+
    "\10\0\2\12\1\0\4\12\2\0\1\164\26\12\5\0"+
    "\2\12\3\0\1\12\3\0\1\12\10\0\2\12\1\0"+
    "\4\12\2\0\1\12\1\165\25\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\10\0\2\12\1\0\4\12\2\0"+
    "\4\12\1\166\22\12\5\0\2\12\3\0\1\12\3\0"+
    "\1\12\10\0\2\12\1\0\4\12\2\0\3\12\1\167"+
    "\23\12\5\0\2\12\3\0\1\12\3\0\1\12\10\0"+
    "\2\12\1\0\4\12\2\0\3\12\1\170\23\12\5\0"+
    "\2\12\3\0\1\12\3\0\1\12\10\0\2\12\1\0"+
    "\4\12\2\0\7\12\1\171\17\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\10\0\2\12\1\0\4\12\2\0"+
    "\11\12\1\172\15\12\5\0\2\12\3\0\1\12\3\0"+
    "\1\12\10\0\2\12\1\0\4\12\2\0\11\12\1\173"+
    "\15\12\5\0\2\12\3\0\1\12\3\0\1\12\10\0"+
    "\2\12\1\0\4\12\2\0\1\174\26\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\14\12\1\175\12\12\5\0\2\12\3\0\1\12"+
    "\3\0\1\12\10\0\2\12\1\0\4\12\2\0\4\12"+
    "\1\176\22\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\4\12\1\177\22\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\1\200\26\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\10\0\2\12\1\0\4\12\2\0"+
    "\1\12\1\201\25\12\5\0\2\12\3\0\1\12\3\0"+
    "\1\12\10\0\2\12\1\0\4\12\2\0\1\12\1\202"+
    "\25\12\5\0\2\12\3\0\1\12\3\0\1\12\10\0"+
    "\2\12\1\0\4\12\2\0\3\12\1\203\23\12\5\0"+
    "\2\12\3\0\1\12\3\0\1\12\10\0\2\12\1\0"+
    "\4\12\2\0\12\12\1\204\14\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\10\0\2\12\1\0\4\12\2\0"+
    "\12\12\1\205\14\12\5\0\2\12\3\0\1\12\3\0"+
    "\1\12\10\0\2\12\1\0\4\12\2\0\16\12\1\206"+
    "\10\12\5\0\2\12\3\0\1\12\3\0\1\12\10\0"+
    "\2\12\1\0\4\12\2\0\22\12\1\207\4\12\5\0"+
    "\2\12\3\0\1\12\3\0\1\12\10\0\2\12\1\0"+
    "\4\12\2\0\5\12\1\210\21\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\10\0\2\12\1\0\4\12\2\0"+
    "\1\211\26\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\4\12\1\212\22\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\4\12\1\213\22\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\13\12\1\214\13\12\5\0\2\12\3\0\1\12"+
    "\3\0\1\12\10\0\2\12\1\0\4\12\2\0\13\12"+
    "\1\215\13\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\4\12\1\216\22\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\2\12\1\217\24\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\5\12\1\220\21\12\5\0\2\12\3\0\1\12"+
    "\3\0\1\12\10\0\2\12\1\0\4\12\2\0\13\12"+
    "\1\221\13\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\13\12\1\222\13\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\5\12\1\223\21\12\5\0\2\12"+
    "\3\0\1\12\3\0\1\12\10\0\2\12\1\0\4\12"+
    "\2\0\1\224\26\12\5\0\2\12\3\0\1\12\3\0"+
    "\1\12\10\0\2\12\1\0\4\12\2\0\4\12\1\225"+
    "\22\12\5\0\2\12\3\0\1\12\3\0\1\12\10\0"+
    "\2\12\1\0\4\12\2\0\4\12\1\226\22\12\5\0"+
    "\2\12\3\0\1\12\3\0\1\12\10\0\2\12\1\0"+
    "\4\12\2\0\4\12\1\227\22\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\10\0\2\12\1\0\4\12\2\0"+
    "\1\230\26\12\5\0\2\12\3\0\1\12\3\0\1\12"+
    "\10\0\2\12\1\0\4\12\2\0\5\12\1\231\21\12"+
    "\5\0\2\12\3\0\1\12\3\0\1\12\10\0\2\12"+
    "\1\0\4\12\2\0\1\232\26\12\5\0\2\12\3\0"+
    "\1\12\3\0\1\12\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\1\11\1\1\2\11\10\1\1\11\2\0"+
    "\2\1\3\0\1\1\3\11\7\1\2\11\2\1\1\0"+
    "\1\1\14\11\13\1\4\11\2\0\5\1\2\11\1\1"+
    "\1\11\14\1\1\11\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }
    private Symbol symbol(int type, String value) {
    return new Symbol(type, yyline, yycolumn, value);
  }
  
      private Symbol symbol(int type, int value) {
    return new Symbol(type, yyline, yycolumn, value);
  }
  
  int parens = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SpecLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SpecLangLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.github.jhoenicke.javacup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { yybegin(ARGS); return symbol(SpecLangSymbols.OUT_OF_GAS);
          }
        case 58: break;
        case 1: 
          { /* ignore */
          }
        case 59: break;
        case 51: 
          { yybegin(ARGS); return symbol(SpecLangSymbols.SUCCESS);
          }
        case 60: break;
        case 49: 
          { yybegin(ARGS); return symbol(SpecLangSymbols.REVERT);
          }
        case 61: break;
        case 44: 
          { yybegin(ARGS); return symbol(SpecLangSymbols.FAILL);
          }
        case 62: break;
        case 22: 
          { yybegin(FUNC); return symbol(SpecLangSymbols.LPAR);
          }
        case 63: break;
        case 32: 
          { return symbol(SpecLangSymbols.OR);
          }
        case 64: break;
        case 35: 
          { return symbol(SpecLangSymbols.EQ);
          }
        case 65: break;
        case 38: 
          { return symbol(SpecLangSymbols.IMPLIES);
          }
        case 66: break;
        case 34: 
          { return symbol(SpecLangSymbols.GEQ);
          }
        case 67: break;
        case 46: 
          { return symbol(SpecLangSymbols.FSUM);
          }
        case 68: break;
        case 54: 
          { yybegin(ATOM); return symbol(SpecLangSymbols.FINISHED);
          }
        case 69: break;
        case 29: 
          { return symbol(SpecLangSymbols.ALWAYS);
          }
        case 70: break;
        case 26: 
          { yybegin(FUNC); return symbol(SpecLangSymbols.RPAR);
          }
        case 71: break;
        case 36: 
          { return symbol(SpecLangSymbols.NEQ);
          }
        case 72: break;
        case 48: 
          { yybegin(ARGS); return symbol(SpecLangSymbols.ASSERT);
          }
        case 73: break;
        case 43: 
          { yybegin(ARGS); return symbol(SpecLangSymbols.CALL);
          }
        case 74: break;
        case 3: 
          { return symbol(SpecLangSymbols.LPAR);
          }
        case 75: break;
        case 7: 
          { return symbol(SpecLangSymbols.RELEASE);
          }
        case 76: break;
        case 41: 
          { return symbol(SpecLangSymbols.OLD);
          }
        case 77: break;
        case 4: 
          { return symbol(SpecLangSymbols.RPAR);
          }
        case 78: break;
        case 11: 
          { return symbol(SpecLangSymbols.MULTIPLY);
          }
        case 79: break;
        case 9: 
          { return symbol(SpecLangSymbols.NEG);
          }
        case 80: break;
        case 56: 
          { yybegin(ATOM); return symbol(SpecLangSymbols.WILL_SUCCEED);
          }
        case 81: break;
        case 42: 
          { yybegin(CONSTRAINT2); return symbol(SpecLangSymbols.SENT);
          }
        case 82: break;
        case 30: 
          { return symbol(SpecLangSymbols.EVENTUALLY);
          }
        case 83: break;
        case 13: 
          { return symbol(SpecLangSymbols.LBRACKET);
          }
        case 84: break;
        case 17: 
          { return symbol(SpecLangSymbols.ARG_SEP);
          }
        case 85: break;
        case 50: 
          { yybegin(ATOM); return symbol(SpecLangSymbols.STARTED);
          }
        case 86: break;
        case 8: 
          { return symbol(SpecLangSymbols.NEXT);
          }
        case 87: break;
        case 18: 
          { return symbol(SpecLangSymbols.PLUS);
          }
        case 88: break;
        case 45: 
          { return symbol(SpecLangSymbols.TRUE);
          }
        case 89: break;
        case 16: 
          { return symbol(SpecLangSymbols.GT);
          }
        case 90: break;
        case 23: 
          { yybegin(ARGLIST); return symbol(SpecLangSymbols.LPAR);
          }
        case 91: break;
        case 15: 
          { return symbol(SpecLangSymbols.LT);
          }
        case 92: break;
        case 6: 
          { return symbol(SpecLangSymbols.UNTIL);
          }
        case 93: break;
        case 39: 
          { return symbol(SpecLangSymbols.INT, new BigInteger(yytext().substring(2), 16));
          }
        case 94: break;
        case 57: 
          { yybegin(ARGS); return symbol(SpecLangSymbols.CALL_SUCCESS);
          }
        case 95: break;
        case 37: 
          { yybegin(ARGS); return symbol(SpecLangSymbols.INV);
          }
        case 96: break;
        case 20: 
          { return symbol(SpecLangSymbols.DIVIDE);
          }
        case 97: break;
        case 14: 
          { return symbol(SpecLangSymbols.RBRACKET);
          }
        case 98: break;
        case 12: 
          { return symbol(SpecLangSymbols.INT, new BigInteger(yytext()));
          }
        case 99: break;
        case 25: 
          { parens = 0; yybegin(CONSTRAINT2); return symbol(SpecLangSymbols.ARG_SEP);
          }
        case 100: break;
        case 33: 
          { return symbol(SpecLangSymbols.LEQ);
          }
        case 101: break;
        case 53: 
          { yybegin(ATOM); return symbol(SpecLangSymbols.REVERTED);
          }
        case 102: break;
        case 52: 
          { yybegin(ARGS); return symbol(SpecLangSymbols.REQUIRE);
          }
        case 103: break;
        case 5: 
          { yybegin(CONSTRAINT); return symbol(SpecLangSymbols.CONSTRAINT_BEGIN);
          }
        case 104: break;
        case 19: 
          { return symbol(SpecLangSymbols.MINUS);
          }
        case 105: break;
        case 24: 
          { yybegin(YYINITIAL); return symbol(SpecLangSymbols.RPAR);
          }
        case 106: break;
        case 10: 
          { return symbol(SpecLangSymbols.SEQ);
          }
        case 107: break;
        case 40: 
          { return symbol(SpecLangSymbols.SUM);
          }
        case 108: break;
        case 28: 
          { if(parens > 0) { parens--; } else { yybegin(YYINITIAL); } return symbol(SpecLangSymbols.RPAR);
          }
        case 109: break;
        case 2: 
          { return symbol(SpecLangSymbols.NAME, yytext());
          }
        case 110: break;
        case 31: 
          { return symbol(SpecLangSymbols.AND);
          }
        case 111: break;
        case 21: 
          { yybegin(YYINITIAL); return symbol(SpecLangSymbols.CONSTRAINT_END);
          }
        case 112: break;
        case 27: 
          { parens++; return symbol(SpecLangSymbols.LPAR);
          }
        case 113: break;
        case 47: 
          { return symbol(SpecLangSymbols.FALSE);
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return symbol(SpecLangSymbols.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
